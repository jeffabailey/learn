name: Test Coverage

on:
  push:
    branches: [ main, master, develop, claude/* ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  # Python Learning Content Tests
  python-learning-tests:
    name: Python Learning Content
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: programming/python

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run tests with coverage
        run: |
          pytest --cov --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./programming/python/coverage.xml
          flags: python-learning
          name: python-learning-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: python-learning-coverage
          path: programming/python/htmlcov/
          retention-days: 30

  # Django HTMX Alpine - Python Tests
  django-python-tests:
    name: Django HTMX Alpine (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frameworks/htmx/django-htmx-alpine

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run migrations
        run: |
          poetry run python manage.py migrate --noinput

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frameworks/htmx/django-htmx-alpine/coverage.xml
          flags: django-python
          name: django-python-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: django-python-coverage
          path: frameworks/htmx/django-htmx-alpine/htmlcov/
          retention-days: 30

  # Django HTMX Alpine - JavaScript Tests
  django-javascript-tests:
    name: Django HTMX Alpine (JavaScript)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frameworks/htmx/django-htmx-alpine

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frameworks/htmx/django-htmx-alpine/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests with coverage
        run: npm run jest-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frameworks/htmx/django-htmx-alpine/coverage/lcov.info
          flags: django-javascript
          name: django-javascript-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: django-javascript-coverage
          path: frameworks/htmx/django-htmx-alpine/coverage/
          retention-days: 30

  # LocalRAG ML Tests
  localrag-tests:
    name: LocalRAG ML Project
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: machine-learning/localrag

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          # Note: Heavy ML dependencies (torch, sentence-transformers, etc.) are not needed
          # because tests use mocking. This keeps CI fast and avoids version conflicts.

      - name: Run tests with coverage
        run: |
          pytest --cov --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./machine-learning/localrag/coverage.xml
          flags: localrag
          name: localrag-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: localrag-coverage
          path: machine-learning/localrag/htmlcov/
          retention-days: 30

  # Generate Coverage Summary
  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: [python-learning-tests, django-python-tests, django-javascript-tests, localrag-tests]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: Display coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Projects Tested" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Python Learning Content" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Django HTMX Alpine (Python)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Django HTMX Alpine (JavaScript)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ LocalRAG ML Project" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports are available as artifacts on this workflow run." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### View Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Download HTML coverage reports from the Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "- View detailed coverage on [Codecov](https://codecov.io)" >> $GITHUB_STEP_SUMMARY

      - name: List coverage artifacts
        run: |
          echo "Coverage artifacts downloaded:"
          ls -la coverage-reports/
